# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-05-18 12:38
from __future__ import unicode_literals

import ckeditor.fields
from django.db import migrations, models
import django.db.models.deletion
import meta.models
import shop.functions


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('geolocation', '0001_initial'),
        ('partner', '0001_initial'),
        ('faq', '0002_auto_20170518_1808'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Attribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(editable=False)),
                ('modified', models.DateTimeField(blank=True, null=True)),
                ('type_service', models.PositiveSmallIntegerField(choices=[(0, 'Default'), (1, 'Writing Services'), (2, 'Job Assistance Services'), (3, 'Courses'), (4, 'Other Services')], default=0, verbose_name='Service')),
                ('name', models.CharField(help_text='Unique name going to decide the slug', max_length=100, verbose_name='Name')),
                ('display_name', models.CharField(help_text='Unique name going to decide the slug', max_length=100, verbose_name='Display Name')),
                ('type_attribute', models.PositiveSmallIntegerField(choices=[(0, 'Text'), (1, 'Integer'), (2, 'True / False'), (3, 'Float'), (4, 'Rich Text'), (5, 'Date'), (6, 'Option'), (7, 'Entity'), (8, 'File'), (9, 'Image')], default=0, verbose_name='Type')),
                ('required', models.BooleanField(default=False, verbose_name='Required')),
                ('is_visible', models.BooleanField(default=True)),
                ('is_multiple', models.BooleanField(default=True)),
                ('is_searchable', models.BooleanField(default=True)),
                ('is_indexable', models.BooleanField(default=True)),
                ('is_comparable', models.BooleanField(default=True)),
                ('is_filterable', models.BooleanField(default=True)),
                ('is_sortable', models.BooleanField(default=True)),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AttributeOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(max_length=255, verbose_name='Option')),
            ],
            options={
                'verbose_name': 'Attribute option',
                'verbose_name_plural': 'Attribute options',
            },
        ),
        migrations.CreateModel(
            name='AttributeOptionGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Attribute option group',
                'verbose_name_plural': 'Attribute option groups',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(editable=False)),
                ('modified', models.DateTimeField(blank=True, null=True)),
                ('url', models.CharField(blank=True, max_length=255, verbose_name='Url')),
                ('title', models.CharField(blank=True, max_length=255, verbose_name='Title')),
                ('meta_desc', models.TextField(blank=True, default='', verbose_name='Meta Description')),
                ('meta_keywords', models.TextField(blank=True, default='', verbose_name='Keywords')),
                ('heading', models.CharField(blank=True, max_length=255, verbose_name='H1')),
                ('image_alt', models.CharField(blank=True, max_length=255, verbose_name='Image Alt')),
                ('name', models.CharField(help_text='Unique name going to decide the slug', max_length=100, verbose_name='Name')),
                ('slug', models.CharField(help_text='Unique slug', max_length=100, unique=True, verbose_name='Slug')),
                ('type_service', models.PositiveSmallIntegerField(choices=[(0, 'Default'), (1, 'Writing Services'), (2, 'Job Assistance Services'), (3, 'Courses'), (4, 'Other Services')], default=0, verbose_name='Service')),
                ('type_level', models.PositiveSmallIntegerField(choices=[(0, 'Default'), (1, 'Level 1'), (2, 'Level 2'), (3, 'Level 3'), (4, 'Level 4')], default=0, verbose_name='Level')),
                ('video_link', models.CharField(blank=True, max_length=200, verbose_name='Video Link')),
                ('career_outcomes', models.CharField(blank=True, help_text='semi-colon(;) separated designations, e.g. Project Engineer; Software Engineer; ...', max_length=500, null=True)),
                ('description', ckeditor.fields.RichTextField(blank=True, default='', verbose_name='Description')),
                ('banner', models.ImageField(blank=True, null=True, upload_to=shop.functions.get_upload_path_category, verbose_name='Banner')),
                ('is_skill', models.BooleanField(default=False, verbose_name='Is Skill')),
                ('graph_image', models.ImageField(blank=True, null=True, upload_to=shop.functions.get_upload_path_category, verbose_name='Graph Image')),
                ('image', models.ImageField(blank=True, null=True, upload_to=shop.functions.get_upload_path_category, verbose_name='Image')),
                ('icon', models.ImageField(blank=True, null=True, upload_to=shop.functions.get_upload_path_category, verbose_name='Icon')),
                ('active', models.BooleanField(default=False)),
                ('display_order', models.IntegerField(default=1)),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'verbose_name': 'Catalog Category',
                'verbose_name_plural': 'Catalog Categories',
                'get_latest_by': 'created',
            },
            bases=(models.Model, meta.models.ModelMeta),
        ),
        migrations.CreateModel(
            name='CategoryRelationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(editable=False)),
                ('modified', models.DateTimeField(blank=True, null=True)),
                ('relation', models.PositiveSmallIntegerField(choices=[(0, 'Active'), (1, 'Inactive')], default=0)),
                ('sort_order', models.PositiveIntegerField(default=1, verbose_name='Sort Order')),
                ('is_main_parent', models.BooleanField(default=False)),
                ('related_from', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_category', to='shop.Category', verbose_name='From')),
                ('related_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_category', to='shop.Category', verbose_name='To')),
            ],
            options={
                'verbose_name': 'Relationship',
                'verbose_name_plural': 'Relationships',
            },
        ),
        migrations.CreateModel(
            name='ChildProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(editable=False)),
                ('modified', models.DateTimeField(blank=True, null=True)),
                ('sort_order', models.PositiveIntegerField(default=1, verbose_name='Sort Order')),
                ('price_offset', models.DecimalField(decimal_places=2, default=0.0, max_digits=8, verbose_name='Price Offset')),
                ('price_offset_percent', models.DecimalField(decimal_places=2, default=0.0, max_digits=8, verbose_name='% Offset')),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FAQProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(editable=False)),
                ('modified', models.DateTimeField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('question_order', models.PositiveIntegerField(default=1, verbose_name='Question Order')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(editable=False)),
                ('modified', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(editable=False)),
                ('modified', models.DateTimeField(blank=True, null=True)),
                ('url', models.CharField(blank=True, max_length=255, verbose_name='Url')),
                ('title', models.CharField(blank=True, max_length=255, verbose_name='Title')),
                ('meta_desc', models.TextField(blank=True, default='', verbose_name='Meta Description')),
                ('meta_keywords', models.TextField(blank=True, default='', verbose_name='Keywords')),
                ('heading', models.CharField(blank=True, max_length=255, verbose_name='H1')),
                ('name', models.CharField(help_text='Unique name going to decide the slug', max_length=100, verbose_name='Name')),
                ('slug', models.CharField(help_text='Unique slug', max_length=100, unique=True, verbose_name='Slug')),
                ('type_service', models.PositiveSmallIntegerField(choices=[(0, 'Default'), (1, 'Writing Services'), (2, 'Job Assistance Services'), (3, 'Courses'), (4, 'Other Services')], default=0, verbose_name='Service')),
                ('type_product', models.PositiveSmallIntegerField(choices=[(0, 'Simple'), (1, 'Configurable'), (2, 'Combo'), (3, 'Virtual/Services'), (4, 'Bundle'), (5, 'Downloadable')], default=0, verbose_name='Type')),
                ('type_flow', models.PositiveSmallIntegerField(choices=[(0, 'Default'), (1, 'Flow 1'), (2, 'Flow 2'), (3, 'Flow 3'), (4, 'Flow 4'), (5, 'Flow 5'), (6, 'Flow 6'), (7, 'Flow 7'), (8, 'Flow 8'), (9, 'Flow 9'), (10, 'Flow 10'), (11, 'Flow 11'), (12, 'Flow 12')], default=0, verbose_name='Flow')),
                ('upc', models.CharField(help_text='To be filled by vendor', max_length=100, verbose_name='Universal Product Code')),
                ('banner', models.ImageField(blank=True, null=True, upload_to=shop.functions.get_upload_path_product_banner, verbose_name='Banner')),
                ('icon', models.ImageField(blank=True, null=True, upload_to=shop.functions.get_upload_path_product_icon, verbose_name='Icon')),
                ('image_bg', models.PositiveSmallIntegerField(choices=[(0, '#c8b98d'), (1, '#cfbabd'), (2, '#75dac2'), (3, '#d2db86'), (4, '#a69cba'), (5, '#8cb3f6'), (6, '#9ac7e5'), (7, '#ad9c7f'), (8, '#80d7ff'), (9, '#a48e96'), (10, '#b4e4fc'), (11, '#d7ccc8'), (12, '#a3e77d'), (13, '#ebdcc9'), (14, '#9fdbd6'), (15, '#a19f9c'), (16, '#deae9e'), (17, '#73a4d4'), (18, '#cba5bf'), (19, '#9099c6'), (20, '#d9bee7'), (21, '#cddb3a'), (22, '#81c783'), (23, '#afbec6'), (24, '#cdac98'), (25, '#c5cbe9'), (26, '#d5d5d5'), (27, '#e39b71')], default=0, verbose_name='Icon Background')),
                ('image', models.ImageField(blank=True, null=True, upload_to=shop.functions.get_upload_path_product_image, verbose_name='Image')),
                ('image_alt', models.CharField(blank=True, max_length=100, verbose_name='Image Alt')),
                ('video_url', models.CharField(blank=True, max_length=200, verbose_name='Video Url')),
                ('flow_image', models.ImageField(blank=True, null=True, upload_to=shop.functions.get_upload_path_product_image, verbose_name='Delivery Flow Image')),
                ('email_cc', ckeditor.fields.RichTextField(blank=True, default='', verbose_name='Email CC')),
                ('about', ckeditor.fields.RichTextField(blank=True, default='', verbose_name='About Product')),
                ('description', ckeditor.fields.RichTextField(blank=True, default='', verbose_name='Description Product')),
                ('buy_shine', ckeditor.fields.RichTextField(blank=True, default='', verbose_name='What you will get')),
                ('mail_desc', ckeditor.fields.RichTextField(blank=True, default='', verbose_name='Welcome Mail Description')),
                ('call_desc', ckeditor.fields.RichTextField(blank=True, default='', verbose_name='Welcome Call Description')),
                ('duration_months', models.IntegerField(default=0, verbose_name='Duration In Months')),
                ('duration_days', models.IntegerField(default=0, verbose_name='Duration In Days')),
                ('experience', models.PositiveSmallIntegerField(choices=[(0, 'Default'), (1, 'Exp 1-4 Yrs'), (2, 'Exp 1-4 Yrs'), (3, 'Flow 3'), (4, 'Flow 4'), (5, 'Flow 5'), (6, 'Flow 6'), (7, 'Flow 7'), (8, 'Flow 8'), (9, 'Flow 9'), (10, 'Flow 10'), (11, 'Flow 11'), (12, 'Flow 12')], default=0, verbose_name='Experience')),
                ('requires_delivery', models.BooleanField(default=True, verbose_name='Requires delivery?')),
                ('certification', models.BooleanField(default=True, verbose_name='Give Certification')),
                ('study_mode', models.PositiveSmallIntegerField(choices=[(0, 'Default'), (1, 'Online'), (2, 'Classroom'), (3, 'Online + Classroom')], default=0, verbose_name='Study Mode')),
                ('course_type', models.PositiveSmallIntegerField(choices=[(0, 'Default'), (1, 'Basic'), (2, 'Intermediate'), (3, 'Expert')], default=0, verbose_name='Course Type')),
                ('avg_rating', models.DecimalField(decimal_places=2, default=2.5, max_digits=8, verbose_name='Average Rating')),
                ('no_review', models.PositiveIntegerField(default=0, verbose_name='No. Of Review')),
                ('buy_count', models.PositiveIntegerField(default=0, verbose_name='Buy Count')),
                ('num_jobs', models.PositiveIntegerField(default=0, verbose_name='Num Jobs')),
                ('search_keywords', models.TextField(blank=True, default='', verbose_name='Search Keywords')),
                ('active', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'get_latest_by': 'created',
            },
            bases=(models.Model, meta.models.ModelMeta),
        ),
        migrations.CreateModel(
            name='ProductArchive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(editable=False)),
                ('modified', models.DateTimeField(blank=True, null=True)),
                ('url', models.CharField(blank=True, max_length=255, verbose_name='Url')),
                ('title', models.CharField(blank=True, max_length=255, verbose_name='Title')),
                ('meta_desc', models.TextField(blank=True, default='', verbose_name='Meta Description')),
                ('meta_keywords', models.TextField(blank=True, default='', verbose_name='Keywords')),
                ('heading', models.CharField(blank=True, max_length=255, verbose_name='H1')),
                ('name', models.CharField(help_text='Unique name going to decide the slug', max_length=100, verbose_name='Name')),
                ('slug', models.CharField(help_text='Unique slug', max_length=100, unique=True, verbose_name='Slug')),
                ('type_service', models.PositiveSmallIntegerField(choices=[(0, 'Default'), (1, 'Writing Services'), (2, 'Job Assistance Services'), (3, 'Courses'), (4, 'Other Services')], default=0, verbose_name='Service')),
                ('type_product', models.PositiveSmallIntegerField(choices=[(0, 'Simple'), (1, 'Configurable'), (2, 'Combo'), (3, 'Virtual/Services'), (4, 'Bundle'), (5, 'Downloadable')], default=0, verbose_name='Type')),
                ('type_flow', models.PositiveSmallIntegerField(choices=[(0, 'Default'), (1, 'Flow 1'), (2, 'Flow 2'), (3, 'Flow 3'), (4, 'Flow 4'), (5, 'Flow 5'), (6, 'Flow 6'), (7, 'Flow 7'), (8, 'Flow 8'), (9, 'Flow 9'), (10, 'Flow 10'), (11, 'Flow 11'), (12, 'Flow 12')], default=0, verbose_name='Flow')),
                ('upc', models.CharField(help_text='To be filled by vendor', max_length=100, verbose_name='Universal Product Code')),
                ('banner', models.ImageField(blank=True, null=True, upload_to=shop.functions.get_upload_path_product_banner, verbose_name='Banner')),
                ('icon', models.ImageField(blank=True, null=True, upload_to=shop.functions.get_upload_path_product_icon, verbose_name='Icon')),
                ('image_bg', models.PositiveSmallIntegerField(choices=[(0, '#c8b98d'), (1, '#cfbabd'), (2, '#75dac2'), (3, '#d2db86'), (4, '#a69cba'), (5, '#8cb3f6'), (6, '#9ac7e5'), (7, '#ad9c7f'), (8, '#80d7ff'), (9, '#a48e96'), (10, '#b4e4fc'), (11, '#d7ccc8'), (12, '#a3e77d'), (13, '#ebdcc9'), (14, '#9fdbd6'), (15, '#a19f9c'), (16, '#deae9e'), (17, '#73a4d4'), (18, '#cba5bf'), (19, '#9099c6'), (20, '#d9bee7'), (21, '#cddb3a'), (22, '#81c783'), (23, '#afbec6'), (24, '#cdac98'), (25, '#c5cbe9'), (26, '#d5d5d5'), (27, '#e39b71')], default=0, verbose_name='Icon Background')),
                ('image', models.ImageField(blank=True, null=True, upload_to=shop.functions.get_upload_path_product_image, verbose_name='Image')),
                ('image_alt', models.CharField(blank=True, max_length=100, verbose_name='Image Alt')),
                ('video_url', models.CharField(blank=True, max_length=200, verbose_name='Video Url')),
                ('flow_image', models.ImageField(blank=True, null=True, upload_to=shop.functions.get_upload_path_product_image, verbose_name='Delivery Flow Image')),
                ('email_cc', ckeditor.fields.RichTextField(blank=True, default='', verbose_name='Email CC')),
                ('about', ckeditor.fields.RichTextField(blank=True, default='', verbose_name='About Product')),
                ('description', ckeditor.fields.RichTextField(blank=True, default='', verbose_name='Description Product')),
                ('buy_shine', ckeditor.fields.RichTextField(blank=True, default='', verbose_name='What you will get')),
                ('mail_desc', ckeditor.fields.RichTextField(blank=True, default='', verbose_name='Welcome Mail Description')),
                ('call_desc', ckeditor.fields.RichTextField(blank=True, default='', verbose_name='Welcome Call Description')),
                ('duration_months', models.IntegerField(default=0, verbose_name='Duration In Months')),
                ('duration_days', models.IntegerField(default=0, verbose_name='Duration In Days')),
                ('experience', models.PositiveSmallIntegerField(choices=[(0, 'Default'), (1, 'Exp 1-4 Yrs'), (2, 'Exp 1-4 Yrs'), (3, 'Flow 3'), (4, 'Flow 4'), (5, 'Flow 5'), (6, 'Flow 6'), (7, 'Flow 7'), (8, 'Flow 8'), (9, 'Flow 9'), (10, 'Flow 10'), (11, 'Flow 11'), (12, 'Flow 12')], default=0, verbose_name='Experience')),
                ('requires_delivery', models.BooleanField(default=True, verbose_name='Requires delivery?')),
                ('certification', models.BooleanField(default=True, verbose_name='Give Certification')),
                ('study_mode', models.PositiveSmallIntegerField(choices=[(0, 'Default'), (1, 'Online'), (2, 'Classroom'), (3, 'Online + Classroom')], default=0, verbose_name='Study Mode')),
                ('course_type', models.PositiveSmallIntegerField(choices=[(0, 'Default'), (1, 'Basic'), (2, 'Intermediate'), (3, 'Expert')], default=0, verbose_name='Course Type')),
                ('siblings', models.CharField(blank=True, max_length=100, verbose_name='Siblings Product')),
                ('related', models.CharField(blank=True, max_length=100, verbose_name='Related Product')),
                ('childs', models.CharField(blank=True, max_length=100, verbose_name='Child Product')),
                ('categories', models.CharField(blank=True, max_length=100, verbose_name='Product Category')),
                ('keywords', models.CharField(blank=True, max_length=100, verbose_name='Product Keyword')),
                ('offers', models.CharField(blank=True, max_length=100, verbose_name='Product Offer')),
                ('faqs', models.CharField(blank=True, max_length=100, verbose_name='Product Structure')),
                ('attributes', models.CharField(blank=True, max_length=100, verbose_name='Product Attributes')),
                ('prices', models.CharField(blank=True, max_length=100, verbose_name='Product Prices')),
                ('originalproduct', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='originalproduct', to='shop.Product', verbose_name='Original Product')),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'verbose_name': 'Product Archive',
                'verbose_name_plural': 'Product Archives ',
                'get_latest_by': 'created',
            },
        ),
        migrations.CreateModel(
            name='ProductAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(editable=False)),
                ('modified', models.DateTimeField(blank=True, null=True)),
                ('value_text', models.CharField(blank=True, max_length=100, verbose_name='Value Text')),
                ('value_integer', models.PositiveSmallIntegerField(default=0, verbose_name='Value Integer')),
                ('value_date', models.DateTimeField(blank=True, null=True, verbose_name='Value Date')),
                ('value_decimal', models.DecimalField(decimal_places=2, default=0.0, max_digits=8, verbose_name='Value Date')),
                ('value_ltext', ckeditor.fields.RichTextField(blank=True, default='', verbose_name='Value Large Text')),
                ('value_file', models.FileField(blank=True, max_length=255, null=True, upload_to=shop.functions.get_upload_path_product_file)),
                ('value_image', models.ImageField(blank=True, max_length=255, null=True, upload_to=shop.functions.get_upload_path_product_image)),
                ('entity_object_id', models.PositiveIntegerField(blank=True, editable=False, null=True)),
                ('active', models.BooleanField(default=True)),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='productattributes', to='shop.Attribute', verbose_name='Attribute')),
                ('entity_content_type', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='productattributes', to='shop.Product', verbose_name='Product')),
                ('value_option', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='shop.AttributeOption', verbose_name='Value option')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(editable=False)),
                ('modified', models.DateTimeField(blank=True, null=True)),
                ('is_main', models.BooleanField(default=True)),
                ('active', models.BooleanField(default=True)),
                ('prd_order', models.PositiveIntegerField(default=1, verbose_name='Product Order')),
                ('cat_order', models.PositiveIntegerField(default=1, verbose_name='Category Order')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='productcategories', to='shop.Category', verbose_name='Category')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='productcategories', to='shop.Product', verbose_name='Product')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductChapter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(editable=False)),
                ('modified', models.DateTimeField(blank=True, null=True)),
                ('sort_order', models.PositiveIntegerField(default=1, verbose_name='Sort Order')),
                ('active', models.BooleanField(default=True)),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='productstructure', to='faq.Chapter')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='productstructure', to='shop.Product')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductExtraInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('info_type', models.CharField(max_length=256, verbose_name='Type')),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.Product', verbose_name='Product')),
            ],
            options={
                'ordering': ['info_type'],
            },
        ),
        migrations.CreateModel(
            name='ProductPrice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(editable=False)),
                ('modified', models.DateTimeField(blank=True, null=True)),
                ('value', models.DecimalField(decimal_places=2, default=0.0, max_digits=8, verbose_name='Value Price')),
                ('fake_value', models.DecimalField(decimal_places=2, default=0.0, max_digits=8, verbose_name='Value Fake Price')),
                ('active', models.BooleanField(default=True)),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='productprices', to='geolocation.Currency', verbose_name='Currency')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='productprices', to='shop.Product', verbose_name='Product')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductScreen',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(editable=False)),
                ('modified', models.DateTimeField(blank=True, null=True)),
                ('url', models.CharField(blank=True, max_length=255, verbose_name='Url')),
                ('title', models.CharField(blank=True, max_length=255, verbose_name='Title')),
                ('meta_desc', models.TextField(blank=True, default='', verbose_name='Meta Description')),
                ('meta_keywords', models.TextField(blank=True, default='', verbose_name='Keywords')),
                ('heading', models.CharField(blank=True, max_length=255, verbose_name='H1')),
                ('name', models.CharField(help_text='Unique name going to decide the slug', max_length=100, verbose_name='Name')),
                ('slug', models.CharField(help_text='Unique slug', max_length=100, unique=True, verbose_name='Slug')),
                ('type_service', models.PositiveSmallIntegerField(choices=[(0, 'Default'), (1, 'Writing Services'), (2, 'Job Assistance Services'), (3, 'Courses'), (4, 'Other Services')], default=0, verbose_name='Service')),
                ('type_product', models.PositiveSmallIntegerField(choices=[(0, 'Simple'), (1, 'Configurable'), (2, 'Combo'), (3, 'Virtual/Services'), (4, 'Bundle'), (5, 'Downloadable')], default=0, verbose_name='Type')),
                ('type_flow', models.PositiveSmallIntegerField(choices=[(0, 'Default'), (1, 'Flow 1'), (2, 'Flow 2'), (3, 'Flow 3'), (4, 'Flow 4'), (5, 'Flow 5'), (6, 'Flow 6'), (7, 'Flow 7'), (8, 'Flow 8'), (9, 'Flow 9'), (10, 'Flow 10'), (11, 'Flow 11'), (12, 'Flow 12')], default=0, verbose_name='Flow')),
                ('upc', models.CharField(help_text='To be filled by vendor', max_length=100, verbose_name='Universal Product Code')),
                ('banner', models.ImageField(blank=True, null=True, upload_to=shop.functions.get_upload_path_product_banner, verbose_name='Banner')),
                ('icon', models.ImageField(blank=True, null=True, upload_to=shop.functions.get_upload_path_product_icon, verbose_name='Icon')),
                ('image_bg', models.PositiveSmallIntegerField(choices=[(0, '#c8b98d'), (1, '#cfbabd'), (2, '#75dac2'), (3, '#d2db86'), (4, '#a69cba'), (5, '#8cb3f6'), (6, '#9ac7e5'), (7, '#ad9c7f'), (8, '#80d7ff'), (9, '#a48e96'), (10, '#b4e4fc'), (11, '#d7ccc8'), (12, '#a3e77d'), (13, '#ebdcc9'), (14, '#9fdbd6'), (15, '#a19f9c'), (16, '#deae9e'), (17, '#73a4d4'), (18, '#cba5bf'), (19, '#9099c6'), (20, '#d9bee7'), (21, '#cddb3a'), (22, '#81c783'), (23, '#afbec6'), (24, '#cdac98'), (25, '#c5cbe9'), (26, '#d5d5d5'), (27, '#e39b71')], default=0, verbose_name='Icon Background')),
                ('image', models.ImageField(blank=True, null=True, upload_to=shop.functions.get_upload_path_product_image, verbose_name='Image')),
                ('image_alt', models.CharField(blank=True, max_length=100, verbose_name='Image Alt')),
                ('video_url', models.CharField(blank=True, max_length=200, verbose_name='Video Url')),
                ('flow_image', models.ImageField(blank=True, null=True, upload_to=shop.functions.get_upload_path_product_image, verbose_name='Delivery Flow Image')),
                ('email_cc', ckeditor.fields.RichTextField(blank=True, default='', verbose_name='Email CC')),
                ('about', ckeditor.fields.RichTextField(blank=True, default='', verbose_name='About Product')),
                ('description', ckeditor.fields.RichTextField(blank=True, default='', verbose_name='Description Product')),
                ('buy_shine', ckeditor.fields.RichTextField(blank=True, default='', verbose_name='What you will get')),
                ('mail_desc', ckeditor.fields.RichTextField(blank=True, default='', verbose_name='Welcome Mail Description')),
                ('call_desc', ckeditor.fields.RichTextField(blank=True, default='', verbose_name='Welcome Call Description')),
                ('duration_months', models.IntegerField(default=0, verbose_name='Duration In Months')),
                ('duration_days', models.IntegerField(default=0, verbose_name='Duration In Days')),
                ('experience', models.PositiveSmallIntegerField(choices=[(0, 'Default'), (1, 'Exp 1-4 Yrs'), (2, 'Exp 1-4 Yrs'), (3, 'Flow 3'), (4, 'Flow 4'), (5, 'Flow 5'), (6, 'Flow 6'), (7, 'Flow 7'), (8, 'Flow 8'), (9, 'Flow 9'), (10, 'Flow 10'), (11, 'Flow 11'), (12, 'Flow 12')], default=0, verbose_name='Experience')),
                ('requires_delivery', models.BooleanField(default=True, verbose_name='Requires delivery?')),
                ('certification', models.BooleanField(default=True, verbose_name='Give Certification')),
                ('study_mode', models.PositiveSmallIntegerField(choices=[(0, 'Default'), (1, 'Online'), (2, 'Classroom'), (3, 'Online + Classroom')], default=0, verbose_name='Study Mode')),
                ('course_type', models.PositiveSmallIntegerField(choices=[(0, 'Default'), (1, 'Basic'), (2, 'Intermediate'), (3, 'Expert')], default=0, verbose_name='Course Type')),
                ('siblings', models.CharField(blank=True, max_length=100, verbose_name='Siblings Product')),
                ('related', models.CharField(blank=True, max_length=100, verbose_name='Related Product')),
                ('childs', models.CharField(blank=True, max_length=100, verbose_name='Child Product')),
                ('categories', models.CharField(blank=True, max_length=100, verbose_name='Product Category')),
                ('keywords', models.CharField(blank=True, max_length=100, verbose_name='Product Keyword')),
                ('offers', models.CharField(blank=True, max_length=100, verbose_name='Product Offer')),
                ('faqs', models.CharField(blank=True, max_length=100, verbose_name='Product Structure')),
                ('attributes', models.CharField(blank=True, max_length=100, verbose_name='Product Attributes')),
                ('prices', models.CharField(blank=True, max_length=100, verbose_name='Product Prices')),
                ('originalproduct', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='linkedproduct', to='shop.Product', verbose_name='Linked Product')),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'verbose_name': 'Product Screen',
                'verbose_name_plural': 'Product Screens ',
                'get_latest_by': 'created',
            },
        ),
        migrations.CreateModel(
            name='RelatedProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(editable=False)),
                ('modified', models.DateTimeField(blank=True, null=True)),
                ('sort_order', models.PositiveIntegerField(default=1, verbose_name='Sort Order')),
                ('price_offset', models.DecimalField(decimal_places=2, default=0.0, max_digits=8, verbose_name='Price Offset')),
                ('price_offset_percent', models.DecimalField(decimal_places=2, default=0.0, max_digits=8, verbose_name='% Offset')),
                ('active', models.BooleanField(default=True)),
                ('type_relation', models.PositiveSmallIntegerField(choices=[(0, 'Default'), (1, 'UpSell'), (2, 'Recommendation'), (3, 'CrossSell')], default=0, verbose_name='Relation')),
                ('ranking', models.PositiveSmallIntegerField(default=0, help_text='Determines order of the products. A product with a higher value will appear before one with a lower ranking.', verbose_name='Ranking')),
                ('primary', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='primaryproduct', to='shop.Product')),
                ('secondary', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='secondaryproduct', to='shop.Product')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VariationProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(editable=False)),
                ('modified', models.DateTimeField(blank=True, null=True)),
                ('sort_order', models.PositiveIntegerField(default=1, verbose_name='Sort Order')),
                ('active', models.BooleanField(default=True)),
                ('main', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mainproduct', to='shop.Product')),
                ('sibling', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='siblingproduct', to='shop.Product')),
            ],
            options={
                'verbose_name': 'Product Variation',
                'verbose_name_plural': 'Product Variations',
            },
        ),
        migrations.AddField(
            model_name='product',
            name='attributes',
            field=models.ManyToManyField(blank=True, through='shop.ProductAttribute', to='shop.Attribute', verbose_name='Product Attribute'),
        ),
        migrations.AddField(
            model_name='product',
            name='categories',
            field=models.ManyToManyField(blank=True, through='shop.ProductCategory', to='shop.Category', verbose_name='Product Category'),
        ),
        migrations.AddField(
            model_name='product',
            name='chapters',
            field=models.ManyToManyField(blank=True, through='shop.ProductChapter', to='faq.Chapter', verbose_name='Product Structure'),
        ),
        migrations.AddField(
            model_name='product',
            name='childs',
            field=models.ManyToManyField(blank=True, related_name='_product_childs_+', through='shop.ChildProduct', to='shop.Product', verbose_name='Child Product'),
        ),
        migrations.AddField(
            model_name='product',
            name='countries',
            field=models.ManyToManyField(blank=True, related_name='countryavailable', to='geolocation.Country', verbose_name='Country Available'),
        ),
        migrations.AddField(
            model_name='product',
            name='faqs',
            field=models.ManyToManyField(blank=True, through='shop.FAQProduct', to='faq.FAQuestion', verbose_name='Product FAQ'),
        ),
        migrations.AddField(
            model_name='product',
            name='keywords',
            field=models.ManyToManyField(blank=True, related_name='productkeyword', to='shop.Keyword', verbose_name='Product Keyword'),
        ),
        migrations.AddField(
            model_name='product',
            name='prices',
            field=models.ManyToManyField(blank=True, through='shop.ProductPrice', to='geolocation.Currency', verbose_name='Product Price'),
        ),
        migrations.AddField(
            model_name='product',
            name='related',
            field=models.ManyToManyField(blank=True, related_name='_product_related_+', through='shop.RelatedProduct', to='shop.Product', verbose_name='Related Product'),
        ),
        migrations.AddField(
            model_name='product',
            name='variation',
            field=models.ManyToManyField(blank=True, related_name='_product_variation_+', through='shop.VariationProduct', to='shop.Product', verbose_name='Variation Product'),
        ),
        migrations.AddField(
            model_name='product',
            name='vendor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='productvendor', to='partner.Vendor', verbose_name='Product Vendor'),
        ),
        migrations.AddField(
            model_name='faqproduct',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='productfaqs', to='shop.Product', verbose_name='Product'),
        ),
        migrations.AddField(
            model_name='faqproduct',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='productfaqs', to='faq.FAQuestion', verbose_name='FAQuestion'),
        ),
        migrations.AddField(
            model_name='childproduct',
            name='children',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='childrenproduct', to='shop.Product'),
        ),
        migrations.AddField(
            model_name='childproduct',
            name='father',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parentproduct', to='shop.Product'),
        ),
        migrations.AddField(
            model_name='category',
            name='categoryproducts',
            field=models.ManyToManyField(blank=True, through='shop.ProductCategory', to='shop.Product', verbose_name='Category Product'),
        ),
        migrations.AddField(
            model_name='category',
            name='related_to',
            field=models.ManyToManyField(blank=True, through='shop.CategoryRelationship', to='shop.Category', verbose_name='Related Category'),
        ),
        migrations.AddField(
            model_name='attributeoption',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='shop.AttributeOptionGroup', verbose_name='Group'),
        ),
        migrations.AddField(
            model_name='attribute',
            name='attributeproducts',
            field=models.ManyToManyField(blank=True, through='shop.ProductAttribute', to='shop.Product', verbose_name='Attribute Product'),
        ),
        migrations.AddField(
            model_name='attribute',
            name='option_group',
            field=models.ForeignKey(blank=True, help_text='Select an option group if using type "Option"', null=True, on_delete=django.db.models.deletion.CASCADE, to='shop.AttributeOptionGroup', verbose_name='Option Group'),
        ),
        migrations.AlterUniqueTogether(
            name='variationproduct',
            unique_together=set([('main', 'sibling')]),
        ),
        migrations.AlterUniqueTogether(
            name='categoryrelationship',
            unique_together=set([('related_from', 'related_to')]),
        ),
        migrations.AlterUniqueTogether(
            name='attributeoption',
            unique_together=set([('group', 'option')]),
        ),
    ]
