# Python Core Import
import logging
import json
# Django Import
from django.utils import timezone
from django.conf import settings
from django.db.models import Count, F

# RestFramework Import

# Model Import
from shop.models import Category, Product, ProductSkill
from haystack.query import SearchQuerySet


from shop.choices import PRODUCT_TAG_CHOICES
from shop.templatetags.shop_tags import format_extra_features
class PopularProductMixin(object):

    def popular_courses_algorithm(self, class_category=settings.COURSE_SLUG, quantity=2):
        """
        According to the new algorithm of Trending courses
        1. Conversion ratio - (total sales generated by that product)[:3]
        2. Revenue per mile - (total amount of sales generated by that product * 1000 / Total views for that product) [:3]
        """
        try:
            product_obj = Product.objects.filter(product_class__slug__in=class_category,
                                                 active=True,
                                                 is_indexed=True)

            product_conversion_ratio = product_obj.order_by('-buy_count')[
                                       :quantity].values_list('id', flat=True)

            product_revenue_per_mile = product_obj.annotate(
                revenue=(F('buy_count') * F('inr_price')) * 1000 / F('cp_page_view')) \
                                           .exclude(id__in=list(product_conversion_ratio)).order_by('-revenue')[
                                       :quantity].values_list('id', flat=True)

            return product_obj, product_conversion_ratio, product_revenue_per_mile

        except Exception as e:
            logging.getLogger('error_log').error("%s" % str(e))
    
    def get_popular_courses(self,category,quantity=3):
        products = Product.objects.filter(category__id=category,
                                                    active=True,
                                                   is_indexed=True).order_by('-buy_count')[:quantity]
        return products   

    def get_products_json(self,product_ids):
        products = SearchQuerySet().filter(id__in=product_ids, pTP__in=[0, 1, 3]).exclude(
            id__in=settings.EXCLUDE_SEARCH_PRODUCTS
        )

        popularProducts = []

        for product in products:
                d = json.loads(product.pVrs).get('var_list')
                data = {
                    'imgUrl':product.pImg,
                    'url':product.pURL,
                    'name':product.pNm,
                    'imgAlt':product.pImA,
                    'rating': float(product.pARx),
                    'mode':product.pStM[0] if product.pStM else None,
                    'providerName':product.pPvn,
                    'price':float(product.pPin),
                    'skillList': product.pSkilln,
                    'about':product.pAb,
                    'title':product.pTt,
                    'slug':product.pSg,
                    'jobsAvailable':product.pNJ,
                    'tags':PRODUCT_TAG_CHOICES[product.pTg][0],
                    'brochure':json.loads(product.pUncdl[0]).get('brochure') if product.pUncdl else None,
                    'u_courses_benefits':json.loads(product.pUncdl[0]).get('highlighted_benefits').split(';') if product.pUncdl else None,
                    'u_desc': product.pDsc,
                    'stars': product.pStar,
                    'highlights':format_extra_features(product.pBS) if product.pBS else None,
                    'id':product.id,
                    }
                if len(d)!=0:
                    data.update({
                        'duration':d[0].get('dur_days'), 
                        'type':d[0].get('type'),  
                        'label':d[0].get('label'), 
                        'level':d[0].get('level'), 
                    })
                
                popularProducts.append(data)

        return popularProducts 